import unittest
from chrlx.utils import *

class TestPathManager(unittest.TestCase):
    def setUp(self):
        join=os.path.join
        self.ae=self.assertEquals
        self.jobs= fixPath("//Bluearc/GFX/jobs")
        self.Ajobs=fixPath("//Bluearc/GFX/jobs/RESTORE/20160316_jfisher_brintellix_P12799/CHRLX-DIRS/2BBACT")

        self.v1job           = join(self.jobs, "charterRound12_P12936")
        self.v1spot          = join(self.v1job,"E_tVEverywhere")
        self.v1comp          = join(self.v1spot,"comp","shot010")
        self.v1scene         = join(self.v1spot,"scenes","shot010")
        self.v1frames        = join(self.v1spot,"frames")
        self.v1compFrames    = join(self.v1spot,"frames","comp_frames","shot010")
        self.v1renderFrames  = join(self.v1spot,"frames","render_frames","shot010")
        self.v1lgt           = join(self.v1spot,"scenes","shot010","lgt")
        self.v1anm           = join(self.v1spot,"scenes","shot010","anm")
        self.v1asset         = join(self.v1spot,"scenes","master")
        self.v1char          = join(self.v1spot,"scenes","master", "char")
        self.v1Ajob          = join(self.Ajobs, "charterRound12_P12936")
        self.v1Aspot         = join(self.v1Ajob, "E_tVEverywhere")
        self.v1Ascene        = join(self.v1Aspot, "scenes","shot010")

        self.v2job           = join(self.jobs,   "charlex_testAreaB_T60174")
        self.v2spot          = join(self.v2job,  "B_restructure")
        self.v2scene         = join(self.v2spot, "3d","shots","shot010")
        self.v2asset         = join(self.v2job,  "3D_assets")
        self.v2comp          = join(self.v2scene,"comp","nuke")
        self.v2lgt           = join(self.v2scene,"lgt")
        self.v2anm           = join(self.v2scene,"anm")
        self.v2config        = join(self.v2spot, "3d","configs","T60174Bmaster_test.xml")
        self.v2compFrames    = join(self.v2spot, "renders","shots","shot010","comp_frames")
        self.v2renderFrames  = join(self.v2spot, "renders","shots","shot010" "render_frames")
        self.v2char          = join(self.v2asset,"characters")

    def test_v1Shot(self):
        anmWorkshop  =PathManager(os.path.join(self.v1anm,"workshop","shot010_anmRef.v0.ma"))
        anmMaster    =PathManager(os.path.join(self.v1anm,"shot010_anm.ma"))
        lgtMaster    =PathManager(os.path.join(self.v1lgt,"P12936E_010_setupA.ma"))
        lgtWorkshop  =PathManager(os.path.join(self.v1lgt,"workshop", "P12936E_010_setupA.01.ma"))
        lgtVersion   =PathManager(os.path.join(self.v1lgt,"versions","P12959A_010_setupA.ma.v3"))
        lgtOver      =ShotPath(self.v1lgt, "balloon", 10)
        lgtMasterOver=ShotPath(lgtMaster,  "balloon")

        self.ae(type(anmWorkshop),                           ShotPath)
        self.ae(anmWorkshop.spotSchema,                      1)
        self.ae(anmWorkshop.version,                         0)
        self.ae(anmWorkshop.getWorkshops()[-1].version,      17)
        self.ae(anmWorkshop.variant,                         "anmRef")
        self.ae(anmWorkshop.shotType,                        "anm")
        self.ae(type(anmMaster),                             ShotPath)
        self.ae(anmMaster.version,                           None)
        self.ae(anmMaster.variant,                           "anm")
        self.ae(anmMaster.shotType,                          "anm")
        self.ae(os.path.basename(anmWorkshop.getMaster()),               "shot010_anm.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop()),         "shot010_anmRef.v18.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop(version=9)),"shot010_anmRef.v9.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop(version=9)),"shot010_anmRef.v9.ma")
        self.ae(os.path.basename(anmWorkshop(shottype="lgt").
                        getNextVersion(variant="setupA")),               "P12936E_010_setupA.ma.v0")
        self.ae(os.path.basename(anmWorkshop(shottype="lgt").
                        getNextWorkshop(variant="setupA")),              "P12936E_010_setupA.25.ma")
        self.ae(os.path.basename(anmWorkshop.getNextVersion()),          "shot010_anm.ma.v2")
        self.ae(os.path.basename(anmWorkshop.getNextVersion(version=9)), "shot010_anm.ma.v9")

        self.ae(lgtMaster.shotType,                          "lgt")
        self.ae(type(lgtMaster),                             ShotPath)
        self.ae(lgtMaster.variant,                           "setupA")
        self.ae(lgtOver.variant,                             "balloon")
        self.ae(lgtOver.version,                             10)
        self.ae(os.path.basename(lgtWorkshop.getMaster()),                           "P12936E_010_setupA.ma")
        self.ae(os.path.basename(lgtOver.getMaster()),                               "P12936E_010_balloon.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop()),                         "P12936E_010_balloon.00.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop(version=3)),                "P12936E_010_balloon.03.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop(version=3, variant="ball")),"P12936E_010_ball.03.ma")
        self.ae(os.path.basename(lgtOver(shottype="anm").getNextWorkshop()),         "shot010_anmRef.v18.ma")
        self.ae(os.path.basename(lgtOver.getNextVersion()),                          "P12936E_010_balloon.ma.v0")
        self.ae(os.path.basename(lgtOver.getNextVersion(version=3)),                 "P12936E_010_balloon.ma.v3")
        self.ae(os.path.basename(lgtOver.getNextVersion(version=3, variant="ball")), "P12936E_010_ball.ma.v3")

    def test_v1Asset(self):
        asset            =PathManager(self.v1asset)
        geoAssetM        =PathManager(os.path.join(self.v1char,"parkLite","geo","parkLite.ma"))
        geoAssetMConcrete=AssetPath(os.path.join(self.v1char,"parkLite","geo","parkLite.ma"))
        geoAssetW        =PathManager(os.path.join(self.v1char,"parkLite","geo","workshop","parkLite_geo.ma.v1"))
        geoAssetWConcrete=AssetPath(os.path.join(self.v1char,"parkLite","geo","workshop","parkLite_geo.ma.v1"))
        geoAssetWParams  =AssetPath(self.v1char,name="parkLite",stage="geo")
        rigAssetMaster   =PathManager(os.path.join(self.v1char,"parkLite","rig","parkLite_rig.ma"))
        mtlWorkshop      =PathManager(os.path.join(self.v1char,"parkLite","mtl","workshop","parkLite_mtl.ma.v5"))

        for pm in [geoAssetM, geoAssetMConcrete, geoAssetWParams]:
            self.ae(type(pm),       AssetPath)
            self.ae(pm.typ,        "char")
            self.ae(pm.name,        "parkLite")
            self.ae(pm.stage,       "geo")
            self.ae(os.path.basename(pm.getMaster()),                "parkLite.ma")
        for pm in [geoAssetW, geoAssetWConcrete, geoAssetWParams]:
            self.ae(type(pm),     AssetPath)
            self.ae(pm.typ,      "char")
            self.ae(pm.name,      "parkLite")
            self.ae(pm.stage,     "geo")
            self.ae(os.path.basename(pm(stage="geo").getMaster()), "parkLite.ma")
            self.ae(os.path.basename(pm(stage="rig").getMaster()), "parkLite_rig.ma")
            self.ae(os.path.basename(pm.getNextVersion()),         "parkLite.ma.v2")
            self.ae(os.path.basename(pm.getNextWorkshop()),        "parkLite_geo.ma.v13")
        self.ae(geoAssetW.version,   1)

        self.ae(rigAssetMaster.typ,        "char")
        self.ae(rigAssetMaster.name,        "parkLite")
        self.ae(rigAssetMaster.stage,       "rig")
        self.ae(type(rigAssetMaster),       AssetPath)
        self.ae(rigAssetMaster.typ,        "char")
        self.ae(rigAssetMaster.name,        "parkLite")
        self.ae(rigAssetMaster.stage,       "rig")
        self.ae(os.path.basename(rigAssetMaster.getMaster()),                   "parkLite_rig.ma")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getMaster()),      "parkLite.ma")
        self.ae(os.path.basename(rigAssetMaster.getNextVersion()),              "parkLite_rig.ma.v2")
        self.ae(os.path.basename(rigAssetMaster.getNextVersion(version=8)),     "parkLite_rig.ma.v8")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getNextVersion()), "parkLite.ma.v2")
        self.ae(os.path.basename(rigAssetMaster.getNextWorkshop()),             "parkLite_refRig.ma.v2")
        self.ae(os.path.basename(rigAssetMaster.getNextWorkshop(version=9)),    "parkLite_refRig.ma.v9")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getNextWorkshop()),"parkLite_geo.ma.v13")
        self.ae(os.path.basename(asset(typ="char", name="parkLite", stage="geo")
                                       .getNextWorkshop()),                     "parkLite_geo.ma.v13")
        self.ae(os.path.basename(asset(typ="char", name="parkLite", stage="geo")
                                       .getNextWorkshop(version=1)),            "parkLite_geo.ma.v1")
        self.ae(os.path.basename(asset(typ="char", name="parkLite", stage="rig")
                                       .getNextWorkshop(version=1)),            "parkLite_refRig.ma.v1")

        self.ae(mtlWorkshop.getWorkshops(),                               [])
        self.ae(os.path.basename(mtlWorkshop.getNextWorkshop()),          "parkLite_mtl.ma.v0")
        self.ae(mtlWorkshop.getNextVersion(),                              None)
        self.assertRaises(AttributeError,                                  asset.getVersions)

        self.ae(asset.charPath,       os.path.join(self.v1asset, "char"))
        self.ae(asset.charactersPath, os.path.join(self.v1asset, "char"))
        self.ae(asset.layoutsPath,    os.path.join(self.v1asset, "char"))
        self.ae(asset.mtlPath,        os.path.join(self.v1asset, "char"))
    def test_v1Comp(self):
        comp     = PathManager(os.path.join(self.v1comp))
        compOver = CompPath(os.path.join(self.v1comp), "test", 2)
        compFile = PathManager(os.path.join(self.v1comp,"P12936E010_comp03_v01.nk"))

        self.ae(type(comp),                                                 CompPath)
        self.ae(compFile.version,                                           1)
        self.ae(compFile.variant,                                           "comp03")
        self.ae(compFile.getVersions()[0],                                  compFile)
        self.ae(compFile.getNextVersion().version,                          2)
        self.ae(compFile.getNextVersion(version=5).version,                 5)
        self.ae(compOver.version,                                           2)
        self.ae(compOver.variant,                                           "test")
        self.ae(os.path.basename(compOver.getNextVersion(variant="hello")), "P12936E010_hello_v00.nk")
        self.assertRaises(AttributeError,                                   comp._getVariant)
        self.assertRaises(AttributeError,                                   comp._getVersion)
    def test_v1Config(self):
        configFile  = PathManager(os.path.join(self.v1spot,"configs","P12936E020_iRush01.xml"))
        configs     = PathManager(os.path.join(self.v1spot,"configs"))
        configsOver = ConfigPath(os.path.join(self.v1spot,"configs"), shotName="master", variant="test")
        configsOver2= ConfigPath(os.path.join(self.v1spot,"configs"), variant="test")
        configsOver3= ConfigPath(PathManager(self.v1anm).configPath, variant="test", shotName=PathManager(self.v1anm).shot.name)
        configsOver4= ConfigPath(PathManager(self.v1anm).configPath, variant="test", shotName="shot010")

        self.ae(type(configFile),                           ConfigPath)
        self.ae(configFile.shotNumber,                      20)
        self.ae(configFile.variant,                         "iRush01")
        self.ae(os.path.basename(configFile.getConfig()),   "P12936E020_iRush01.xml")
        self.ae(os.path.basename(configsOver.getConfig()),  "P12936Emaster_test.xml")
        self.ae(os.path.basename(configsOver3.getConfig()), "P12936E010_test.xml")
        self.ae(os.path.basename(configsOver4.getConfig()), "P12936E010_test.xml")
        self.assertRaises(AttributeError,                   configsOver2.getConfig)
        self.ae(os.path.basename(configFile.getConfig(shotName="shot030", variant="foo")),   "P12936E030_foo.xml")
    def test_v1Frames(self):
        compFrames = PathManager(self.v1compFrames)

        self.ae(type(compFrames), FramesPath)
        self.ae(compFrames.framesPath, self.v1frames)
    def test_v1Base(self):
        spot   = PathManager(self.v1spot)
        comp   = PathManager(self.v1comp)
        scene  = PathManager(self.v1scene)
        frames = PathManager(self.v1compFrames)

        self.ae(spot.shotName,    None)
        self.ae(spot.compPath,    None)
        self.ae(spot.jobDirname,  "charterRound12_P12936")
        self.ae(spot.jobNumber,   12936)
        self.ae(spot.jobPath,     self.v1job)
        self.ae(spot.spotDirname, "E_tVEverywhere")
        self.ae(spot.spotPath,    self.v1spot)
        self.ae(spot.spotLetter,  "E")

        self.ae(comp.shotName,         "shot010")
        self.ae(comp.shot.shot,        10)
        self.ae(comp.shotFullname,     "charterRound12_P12936/E_tVEverywhere/shot010")
        self.ae(comp.comp_frames.path, os.path.join(self.v1frames,"comp_frames","shot010"))
        self.ae(comp.jobDirname,       "charterRound12_P12936")
        self.ae(comp.jobNumber,        12936)
        self.ae(comp.jobPath,          self.v1job)
        self.ae(comp.spotPath,         self.v1spot)
        self.ae(comp.spotLetter,       "E")

        self.ae(scene.shotName,           "shot010")
        self.ae(scene.shotPath,       self.v1scene)
        self.ae(scene.shot.shot,          10)
        self.ae(scene.render_frames.path, os.path.join(self.v1frames,"render_frames","shot010"))
        self.ae(scene.jobDirname,         "charterRound12_P12936")
        self.ae(scene.jobNumber,          12936)
        self.ae(scene.jobPath,            self.v1job)
        self.ae(scene.spotPath,           self.v1spot)
        self.ae(scene.spotLetter,         "E")

        self.ae(frames.shotName,   "shot010")
        self.ae(frames.jobDirname, "charterRound12_P12936")
        self.ae(frames.shot.shot,  10)
    def test_v1Archive(self):
        archive=PathManager(self.v1Ascene)

        self.ae(archive.shotName,             "shot010")
        self.ae(archive.shot.shot,            10)
        self.ae(archive.jobDirname,           "charterRound12_P12936")
        self.ae(archive.jobNumber,            12936)
        self.ae(archive.jobPath,              self.v1Ajob)
        self.ae(archive.spotDirname,          "E_tVEverywhere")
        self.ae(archive.spotPath,             self.v1Aspot)
        self.ae(archive.spotLetter,           "E")
        self.ae(archive.restored.jobPath,     self.v1job)
        self.ae(archive.restored.spotPath,    self.v1spot)
        self.ae(archive.restored.shotPath,    self.v1scene)

    def test_v2Shot(self):
        anmWorkshop  =PathManager(os.path.join(self.v2anm,"newAnmVariant","workshops","T60174Bshot010_anm_newAnmVariant_ws_v001.ma"))
        anmMaster    =PathManager(os.path.join(self.v2anm,"newAnmVariant","T60174Bshot010_anm_newAnmVariant.ma"))
        lgtMaster    =PathManager(os.path.join(self.v2lgt,"newAnmVariant","T60174Bshot010_lgt_newAnmVariant.ma"))
        lgtWorkshop  =PathManager(os.path.join(self.v2lgt,"newAnmVariant","workshops","T60174Bshot010_lgt_newAnmVariant_ws_v001.ma"))
        lgtVersion   =PathManager(os.path.join(self.v2lgt,"newAnmVariant","versions","T60174Bshot010_lgt_newAnmVariant_v001.ma"))
        lgtOver      =ShotPath(self.v2lgt, "balloon", 10)
        lgtMasterOver=ShotPath(lgtMaster, "balloon")

        self.ae(type(anmWorkshop),                           ShotPath)
        self.ae(anmWorkshop.spotSchema,                      2)
        self.ae(anmWorkshop.version,                         1)
        self.ae(anmWorkshop.getWorkshops()[-1].version,      4)
        self.ae(anmWorkshop.variant,                         "newAnmVariant")
        self.ae(anmWorkshop.shotType,                        "anm")
        self.ae(type(anmMaster),                             ShotPath)
        self.ae(anmMaster.version,                           None)
        self.ae(anmMaster.variant,                           "newAnmVariant")
        self.ae(anmMaster.shotType,                          "anm")
        self.ae(os.path.basename(anmWorkshop.getMaster()),               "T60174Bshot010_anm_newAnmVariant.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop()),         "T60174Bshot010_anm_newAnmVariant_ws_v005.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop(version=9)),"T60174Bshot010_anm_newAnmVariant_ws_v009.ma")
        self.ae(os.path.basename(anmWorkshop.getNextWorkshop(version=9)),"T60174Bshot010_anm_newAnmVariant_ws_v009.ma")
        self.ae(os.path.basename(anmWorkshop(shottype="anm").
                        getNextVersion(variant="setupA")),               "T60174Bshot010_anm_setupA_v000.ma")
        self.ae(os.path.basename(anmWorkshop(shottype="anm").
                        getNextWorkshop(variant="setupA")),              "T60174Bshot010_anm_setupA_ws_v000.ma")
        self.ae(os.path.basename(anmWorkshop.getNextVersion()),          "T60174Bshot010_anm_newAnmVariant_v000.ma")
        self.ae(os.path.basename(anmWorkshop.getNextVersion(version=9)), "T60174Bshot010_anm_newAnmVariant_v009.ma")


        self.ae(lgtMaster.shotType,                          "lgt")
        self.ae(type(lgtMaster),                             ShotPath)
        self.ae(lgtMaster.variant,                           "newAnmVariant")
        self.ae(lgtOver.variant,                             "balloon")
        self.ae(lgtOver.version,                             10)
        self.ae(os.path.basename(lgtWorkshop.getMaster()),                           "T60174Bshot010_lgt_newAnmVariant.ma")
        self.ae(os.path.basename(lgtOver.getMaster()),                               "T60174Bshot010_lgt_balloon.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop()),                         "T60174Bshot010_lgt_balloon_ws_v000.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop(version=3)),                "T60174Bshot010_lgt_balloon_ws_v003.ma")
        self.ae(os.path.basename(lgtOver.getNextWorkshop(version=3, variant="ball")),"T60174Bshot010_lgt_ball_ws_v003.ma")
        self.ae(os.path.basename(lgtOver(shottype="anm").getNextWorkshop()),         "T60174Bshot010_anm_balloon_ws_v000.ma")
        self.ae(os.path.basename(lgtOver.getNextVersion()),                          "T60174Bshot010_lgt_balloon_v000.ma")
        self.ae(os.path.basename(lgtOver.getNextVersion(version=3)),                 "T60174Bshot010_lgt_balloon_v003.ma")
        self.ae(os.path.basename(lgtOver.getNextVersion(version=3, variant="ball")), "T60174Bshot010_lgt_ball_v003.ma")

    def test_v2Asset(self):
        self.v2assetMaster   = PathManager(os.path.join(self.v2char,"stickMan","geo","stickMan_geo.ma"))
        self.v2assetWorkshop = PathManager(os.path.join(self.v2char,"stickMan","geo","workshops","stickMan_geo_ws_v002.ma"))

        asset            =PathManager(self.v2asset)
        geoAssetM        =PathManager(os.path.join(self.v2char,"stickMan","geo","stickMan_geo.ma"))
        geoAssetMConcrete=AssetPath(os.path.join(self.v2char,"stickMan","geo","stickMan_geo.ma"))
        geoAssetW        =PathManager(os.path.join(self.v2char,"stickMan","geo","workshop","stickMan_geo_ws_v002.ma"))
        geoAssetWConcrete=AssetPath(os.path.join(self.v2char,"stickMan","geo","workshop","stickMan_geo_ws_v002.ma"))
        geoAssetWParams  =AssetPath(self.v2char,name="stickMan",stage="geo")
        rigAssetMaster   =PathManager(os.path.join(self.v2char,"stickMan","rig","stickMan_rig.ma"))
        mtlWorkshop      =PathManager(os.path.join(self.v2char,"stickMan","mtl","workshop","stickMan_geo_ws_v005.ma"))

        for pm in [geoAssetM, geoAssetMConcrete, geoAssetWParams, geoAssetW, geoAssetWConcrete, geoAssetWParams]:
            self.ae(type(pm),       AssetPath)
            self.ae(pm.stage,       "geo")
            self.ae(pm.typ,         "characters")
            self.ae(pm.name,        "stickMan")
        self.ae(os.path.basename(pm(stage="geo").getMaster()), "stickMan_geo.ma")
        self.ae(os.path.basename(pm(stage="rig").getMaster()), "stickMan_rig.ma")
        self.ae(os.path.basename(pm.getNextVersion()),         "stickMan_geo_v000.ma")
        self.ae(os.path.basename(pm.getNextWorkshop()),        "stickMan_geo_ws_v000.ma")
        self.ae(geoAssetW.version,   2)

        self.ae(rigAssetMaster.typ,        "characters")
        self.ae(rigAssetMaster.name,        "stickMan")
        self.ae(rigAssetMaster.stage,       "rig")
        self.ae(type(rigAssetMaster),       AssetPath)
        self.ae(rigAssetMaster.typ,        "characters")
        self.ae(rigAssetMaster.name,        "stickMan")
        self.ae(rigAssetMaster.stage,       "rig")
        self.ae(os.path.basename(rigAssetMaster.getMaster()),                   "stickMan_rig.ma")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getMaster()),      "stickMan_geo.ma")
        self.ae(os.path.basename(rigAssetMaster.getNextVersion()),              "stickMan_rig_v000.ma")
        self.ae(os.path.basename(rigAssetMaster.getNextVersion(version=8)),     "stickMan_rig_v008.ma")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getNextVersion()), "stickMan_geo_v000.ma")
        self.ae(os.path.basename(rigAssetMaster.getNextWorkshop()),             "stickMan_rig_ws_v000.ma")
        self.ae(os.path.basename(rigAssetMaster.getNextWorkshop(version=9)),    "stickMan_rig_ws_v009.ma")
        self.ae(os.path.basename(rigAssetMaster(stage="geo").getNextWorkshop()),"stickMan_geo_ws_v000.ma")
        self.ae(os.path.basename(asset(typ="char", name="stickMan", stage="geo")
                                       .getNextWorkshop()),                     "stickMan_geo_ws_v000.ma")
        self.ae(os.path.basename(asset(typ="char", name="stickMan", stage="geo")
                                       .getNextWorkshop(version=1)),            "stickMan_geo_ws_v001.ma")
        self.ae(os.path.basename(asset(typ="char", name="stickMan", stage="rig")
                                       .getNextWorkshop(version=1)),            "stickMan_rig_ws_v001.ma")

        self.ae(mtlWorkshop.getWorkshops(),                               [])
        self.ae(os.path.basename(mtlWorkshop.getNextWorkshop()),          "stickMan_mtl_ws_v000.ma")
        self.ae(os.path.basename(mtlWorkshop.getNextVersion()),           "stickMan_mtl_v000.ma")
        self.assertRaises(AttributeError,                                 asset.getVersions)

        self.ae(asset.charPath,       os.path.join(self.v2asset, "characters"))
        self.ae(asset.charactersPath, os.path.join(self.v2asset, "characters"))
        self.ae(asset.layoutsPath,    os.path.join(self.v2asset, "layouts"))
        self.ae(asset.mtlPath,        os.path.join(self.v2asset, "mtl"))
    def test_v2Comp(self):
        compFile = PathManager(os.path.join(self.v2scene,"comp","nuke","T60174Bshot010_comp01_v01.nk"))
        comp     = PathManager(os.path.join(self.v1comp))
        compOver = CompPath(os.path.join(self.v1comp), "test", 2)

        self.ae(type(comp),                                                 CompPath)
        self.ae(compFile.version,                                           1)
        self.ae(compFile.variant,                                           "comp01")
        self.ae(compFile.getVersions()[0],                                  compFile)
        self.ae(compFile.getNextVersion().version,                          2)
        self.ae(compFile.getNextVersion(version=5).version,                 5)
        self.ae(compOver.version,                                           2)
        self.ae(compOver.variant,                                           "test")
        self.ae(os.path.basename(compOver.getNextVersion(variant="hello")), "P12936E010_hello_v00.nk")
        self.assertRaises(AttributeError,                                   comp._getVariant)
        self.assertRaises(AttributeError,                                   comp._getVersion)
    def test_v2Config(self):
        configFile  = PathManager(os.path.join(self.v2spot,"3d", "configs","P12936Eshot020_iRush01.xml"))
        configs     = PathManager(os.path.join(self.v2spot,"configs"))
        configsOver = ConfigPath(os.path.join(self.v2spot,"configs"), shotName="master", variant="test")
        configsOver2= ConfigPath(os.path.join(self.v2spot,"configs"), variant="test")
        configsOver3= ConfigPath(PathManager(self.v2anm).configPath, variant="test", shotName=PathManager(self.v1anm).shot.name)
        configsOver4= ConfigPath(PathManager(self.v2anm).configPath, variant="test", shotName="shot010")

        self.ae(type(configFile),                           ConfigPath)
        self.ae(configFile.shotNumber,                      20)
        self.ae(configFile.variant,                         "iRush01")
        self.ae(os.path.basename(configFile.getConfig()),   "T60174Bshot020_iRush01.xml")
        self.ae(os.path.basename(configsOver.getConfig()),  "T60174Bmaster_test.xml")
        self.ae(os.path.basename(configsOver3.getConfig()), "T60174Bshot010_test.xml")
        self.ae(os.path.basename(configsOver4.getConfig()), "T60174Bshot010_test.xml")
        self.assertRaises(AttributeError,                   configsOver2.getConfig)
        self.ae(os.path.basename(configFile.getConfig(shotName="shot030", variant="foo")),   "T60174Bshot030_foo.xml")
    def test_v2Frames(self):
        compFrames = PathManager(self.v2compFrames)

        self.ae(type(compFrames), FramesPath)
        self.ae(compFrames, self.v2compFrames)
    def test_v2Base(self):
        spot       = PathManager(self.v2spot)
        comp       = PathManager(self.v2comp)
        scene      = PathManager(self.v2scene)
        compFrames = PathManager(self.v2compFrames)

        self.ae(spot.shotName, None)
        self.ae(spot.compPath, None)
        self.ae(spot.jobDirname, "charlex_testAreaB_T60174")
        self.ae(spot.jobNumber, 60174)
        self.ae(spot.jobPath, self.v2job)
        self.ae(spot.spotDirname, "B_restructure")
        self.ae(spot.spotPath, self.v2spot)
        self.ae(spot.spotLetter, "B")

        self.ae(comp.shotName, "shot010")
        self.ae(comp.compPath, comp)
        self.ae(comp.shot.shot, 10)
        self.ae(comp.comp_frames.path, compFrames)
        self.ae(comp.jobDirname, "charlex_testAreaB_T60174")
        self.ae(comp.jobNumber, 60174)
        self.ae(comp.jobPath, self.v2job)
        self.ae(comp.spotPath, self.v2spot)
        self.ae(comp.spotLetter, "B")
        self.ae(comp.shotStage, "shot")

        self.ae(scene.shotName, "shot010")
        self.ae(scene.shotPath, self.v2scene)
        self.ae(scene.shot.shot, 10)
        self.ae(scene.shotFullname, "charlex_testAreaB_T60174/B_restructure/shot010")
        self.ae(scene.render_frames.path, "//Bluearc/GFX/jobs/charlex_testAreaB_T60174/B_restructure/renders/shots/shot010/render_frames")
        self.ae(scene.jobDirname, "charlex_testAreaB_T60174")
        self.ae(scene.jobNumber, 60174)
        self.ae(scene.jobPath, self.v2job)
        self.ae(scene.jobShortname, "T60174")
        self.ae(scene.spotPath, self.v2spot)
        self.ae(scene.spotLetter, "B")
        self.ae(scene.spotFullname, "charlex_testAreaB_T60174/B_restructure")

        self.ae(compFrames.shotName, "shot010")
        self.ae(compFrames.jobDirname, "charlex_testAreaB_T60174")
        self.ae(compFrames.shot.shot, 10)
        self.ae(compFrames.shotStage, "shot")
    def test_v2Archive(self):
        pass

v1Tests=["test_v1Shot","test_v1Asset","test_v1Comp", "test_v1Config", "test_v1Frames", "test_v1Base", "test_v1Archive"]
v2Test=[test.replace("v1", "v2") for test in v1Tests]
allTests=v1Tests+v2Test
#allTests=["test_v2Asset"]  #solo function for debugging
unittest.TextTestRunner().run(unittest.TestSuite(map(TestPathManager,allTests)))
